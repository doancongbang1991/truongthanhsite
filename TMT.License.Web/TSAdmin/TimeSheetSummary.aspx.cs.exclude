using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using DataLayer;
using Entities;
using Ext.Net;
using System.Text;

public partial class TimeSheetSummary : System.Web.UI.Page
{

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!X.IsAjaxRequest)
            LoadPage();
    }
    private void FormatWebControl()
    {
        UserCommon.DateFieldFormat(this.datMLFromDate);
        UserCommon.DateFieldFormat(this.datMLToDate);
        this.colTSDate.Format = UserCommon.DateFormat;
        this.colTSTimeEnd.Format = UserCommon.TimeFormat;
        this.colTSTimeStart.Format = UserCommon.TimeFormat;
    }
    private void LoadPage()
    {
        bool bRight = WebPermission.ViewPermission(WebPermission.ADMIN_TIMESHEET);
        if (!bRight)
        {
            UserCommon.SetSession(UserCommon.SS_Message, Message.MSE_RGNoPermissionView);
            Response.Redirect(UserCommon.Web_ErrorPage, true);
        }
        ResourceManager1.SetTheme(UserCommon.GetCurrentTheme());
        FormatWebControl();
        LoadcbbCID();
        LoadcbbMLID();
        LoadcbbUID();
        LoadcbbSID(true);
        UserCommon.SetSession(UserCommon.DataExport, null);
        UserCommon.SetValueControl(this.datMLToDate, UserCommon.GetDateTime());
        this.wReportFilter.Show();
    }
    protected void btExport_Click(object sender, DirectEventArgs e)
    {
        try
        {
            object[] w = new object[] { "50px", "70px", "160px", "160px", "160px", "160px", "80px", "80px", "80px", "120px" };
            string[] h = new string[] { "ID", "Date", "Client Name", "Matter", "Task Name", "Decription","Start Time","End Time", "Hour", "TimeKeeper" };
            string HtmlBegin = ExportWithTemplate.HtmlBegin("BizLaw Timesheet", "TimeSheet Summary", w);
            string HtmlTableMain = ExportWithTemplate.HtmlTableMain(false);
            string HtmlEndTableMain = ExportWithTemplate.HtmlEndTableMain();
            string HtmlHeader = ExportWithTemplate.HtmlHeader(w.Length, "TimeSheet Summary");
            string HtmlTitle = ExportWithTemplate.HtmlTitle("TimeSheet Summary", w.Length);
            string BeginTable = ExportWithTemplate.BeginTable(w.Length);
            string ColumNameTable = ExportWithTemplate.ColumNameTable(h);
            string ContentHeader = "";
            StringBuilder RowContent = new StringBuilder();
            string EndTable = ExportWithTemplate.EndTable();
            string HtmlFooter = ExportWithTemplate.HtmlFooter(w.Length);
            string HtmlEnd = ExportWithTemplate.HtmlEnd();

            object ss = UserCommon.GetSession(UserCommon.DataExport);
            if (ss != null)
            {
                DataTable dt = (DataTable)ss;
                string GroupHeader = "";
                string GroupContent = "";
                string GroupName = "";
                double GroupTotal = 0;
                string GroupID = "0";
                int pos = 0;
                string GroupIDNew = "0";
                object[] content;
                object[] Group;
                for (int r = 0; r < dt.Rows.Count; r++)
                {
                    Group = GetGroupBy(dt, r,GroupName, GroupTotal);
                    pos = r;
                    if (r == 0)
                        GroupID = Group[0].ToString();
                    GroupIDNew = Group[0].ToString();
                    if (GroupID != GroupIDNew)
                    {
                        GroupHeader = Group[2].ToString(); //ExportWithTemplate.RowContent(new object[] { "<b>Client: " + GroupName + "</b>", "<b>" + GroupTotal.ToString() + "</b>" }, new int[] { 9, 0 });
                        GroupContent = GroupHeader + GroupContent;
                        GroupTotal = 0;
                        RowContent.Append(GroupContent);
                        GroupContent = "";
                        GroupID = GroupIDNew;

                    }
                    GroupName = Group[1].ToString();// dt.Rows[r][ClientData.TBC_CName_EN].ToString();
                    GroupTotal += UserCommon.ToDouble(dt.Rows[r][TimeSheetData.TBC_TSTimeSpan].ToString());
                    DateTime TSDate = UserCommon.VerifyDateTime(dt.Rows[r][TimeSheetData.TBC_TSDate]);
                    DateTime TSStart = UserCommon.VerifyDateTime(dt.Rows[r][TimeSheetData.TBC_TSTimeStart]);
                    DateTime TSEnd = UserCommon.VerifyDateTime(dt.Rows[r][TimeSheetData.TBC_TSTimeEnd]);
                    content = new object[] { dt.Rows[r][TimeSheetData.TBC_TSID].ToString(), "&#8203;" + UserCommon.ToDateString(TSDate), dt.Rows[r][ClientData.TBC_CName_EN].ToString(), dt.Rows[r][MatterListData.TBC_MLName].ToString(), dt.Rows[r][TaskData.TBC_TName].ToString(), dt.Rows[r][TimeSheetData.TBC_TSDecription].ToString(), UserCommon.ToTimeString(TSStart), UserCommon.ToTimeString(TSEnd), dt.Rows[r][TimeSheetData.TBC_TSTimeSpan].ToString(), dt.Rows[r][UserInfoData.TBC_UFullName].ToString() };
                    GroupContent += ExportWithTemplate.RowContent(content);

                }
                if (pos == dt.Rows.Count - 1)
                {
                    Group = GetGroupBy(dt, pos, GroupName, GroupTotal);
                    GroupHeader = Group[2].ToString(); //ExportWithTemplate.RowContent(new object[] { "<b>Client: " + GroupName + "</b>", "<b>" + GroupTotal.ToString() + "</b>" }, new int[] { 9, 0 });
                    GroupContent = GroupHeader + GroupContent;
                    GroupTotal = 0;
                    RowContent.Append(GroupContent);
                }


                string finalhtmls = HtmlBegin + HtmlTableMain + HtmlHeader + HtmlTitle + ContentHeader + BeginTable + ColumNameTable + RowContent + EndTable + HtmlEndTableMain + HtmlEnd;
                HttpContext context = HttpContext.Current;
                context.Response.Clear();
                context.Response.ClearHeaders();
                context.Response.Charset = "utf-8";
                context.Response.Write(finalhtmls.Replace("*", "\""));

                context.Response.ContentType = "application/vnd.ms-excel";
                context.Response.AddHeader("Content-Disposition", "attachment;filename=BizLaw_TimesheetSummary.xls");
                context.Response.Flush();
                context.Response.End();
                context.Response.Close();
                Response.End();
            }
            else
                UserCommon.MsbShow(Message.MSE_ExportError, UserCommon.ERROR);

        }
        catch
        {
            UserCommon.MsbShow(Message.MSE_ExportError, UserCommon.ERROR);
        }
    }
    protected void btReportFilter_Click(object sender, DirectEventArgs e)
    {
        this.wReportFilter.Show();
    }
    protected void btCancel_Click(object sender, DirectEventArgs e)
    {
        this.wReportFilter.Hide();
    }
    protected void btSearch_Click(object sender, DirectEventArgs e)
    {
        LoadGridTimeSheetSummary();
        this.wReportFilter.Hide();
    }

    private void LoadcbbCID()
    {
        int UID = UserCommon.ToInt(UserCommon.GetCookie_UID());
        DataTable dt = new TimeSheetData().GetOnlyClientAll(UID);
        this.cbbCID.SelectedItems.Clear();
        this.stCID.DataSource = dt;
        this.stCID.DataBind();
        UserCommon.AddItemOptionInCombobox(this.cbbCID, stCID);
        UserCommon.SetValueControl(this.cbbCID, "0");
    }
    private void LoadcbbMLID()
    {
        int UID = UserCommon.ToInt(UserCommon.GetCookie_UID());
        DataTable dt = new TimeSheetData().GetOnlyMasterAll(UID);
        this.cbbMLID.SelectedItems.Clear();
        this.stMLID.DataSource = dt;
        this.stMLID.DataBind();
        UserCommon.AddItemOptionInCombobox(this.cbbMLID, stMLID);
        UserCommon.SetValueControl(this.cbbMLID, "0");
    }
    private void LoadcbbUID()
    {
        DataTable dt = new TimeSheetData().GetOnlyUserAll(0);
        this.cbbUID.SelectedItems.Clear();
        this.stUID.DataSource = dt;
        this.stUID.DataBind();
        UserCommon.AddItemOptionInCombobox(this.cbbUID, stUID);
        UserCommon.SetValueControl(this.cbbUID, "0");
    }
 
    private void LoadcbbSID(bool IsAllData)
    {
        this.cbbSID.SelectedItems.Clear();
        this.stSID.DataSource = UserCommon.ListGroupBy();
        this.stSID.DataBind();
        UserCommon.AddItemFilterInCombobox(this.cbbSID, this.stSID);
        UserCommon.SetValueControl(this.cbbSID, "0");
    }

    private void SetGroupBy(ref string OrderBy)
    {
        int SID = UserCommon.ToInt(this.cbbSID.SelectedItem.Value);
        switch (SID)
        {
            case 2:
                this.stTimeSheet.Call("group", TimeSheetData.TBC_MLID);
                OrderBy = TimeSheetData.TBC_MLID + "," + TimeSheetData.TBC_TSDate;
                break;
            case 3:
                this.stTimeSheet.Call("group", TimeSheetData.TBC_TID);
                OrderBy = TimeSheetData.TBC_TID + "," + TimeSheetData.TBC_TSDate;

                break;
            case 4:
                this.stTimeSheet.Call("group", TimeSheetData.TBC_TSDate);
                OrderBy = TimeSheetData.TBC_TSDate + "," + ClientData.TBC_CID;
                break;
            default:
                this.stTimeSheet.Call("group", ClientData.TBC_CID);
                OrderBy = ClientData.TBC_CID + "," + TimeSheetData.TBC_TSDate;
                break;
        }
    }
    private object[] GetGroupBy(DataTable dt, int Rowindex,string GroupName,double GroupTotal)
    {
        object[] tmp = new object[3];
       
        int SID = UserCommon.ToInt(this.cbbSID.SelectedItem.Value);
        switch (SID)
        {
            case 2:
                tmp[0] = UserCommon.ToInt(dt.Rows[Rowindex][TimeSheetData.TBC_MLID]);
                tmp[1] = dt.Rows[Rowindex][MatterListData.TBC_MLName].ToString();
                tmp[2] = ExportWithTemplate.RowContent(new object[] { "<b>Matter: " + GroupName + "</b>", "<b>" + GroupTotal.ToString() + "</b>" }, new int[] { 9, 0 });
                break;
            case 3:
                tmp[0] = UserCommon.ToInt(dt.Rows[Rowindex][TimeSheetData.TBC_TID]);
                tmp[1] = dt.Rows[Rowindex][TaskData.TBC_TName].ToString();
                tmp[2] = ExportWithTemplate.RowContent(new object[] { "<b>Task: " + GroupName + "</b>", "<b>" + GroupTotal.ToString() + "</b>" }, new int[] { 9, 0 });
                break;
            case 4:
                DateTime d = UserCommon.VerifyDateTime(dt.Rows[Rowindex][TimeSheetData.TBC_TSDate]);
                tmp[0] = UserCommon.ToDateString(d);
                tmp[1] = UserCommon.ToDateString(d);
                tmp[2] = ExportWithTemplate.RowContent(new object[] { "<b>Date: " + GroupName + "</b>", "<b>" + GroupTotal.ToString() + "</b>" }, new int[] { 9, 0 });
                break;
            default:
                tmp[0] = UserCommon.ToInt(dt.Rows[Rowindex][ClientData.TBC_CID]);
                tmp[1] = dt.Rows[Rowindex][ClientData.TBC_CName_EN].ToString();
                tmp[2] = ExportWithTemplate.RowContent(new object[] { "<b>Client: " + GroupName + "</b>", "<b>" + GroupTotal.ToString() + "</b>" }, new int[] { 9, 0 });
                break;
        }
        return tmp;
    }
    private void LoadGridTimeSheetSummary()
    {
        string OderBy = "";
        this.RowSelectionModelTimeSheet.ClearSelection();
        this.grTimeSheet.Call("clearMemory");
        SetGroupBy(ref OderBy);
        int MLID = UserCommon.ToInt(this.cbbMLID.SelectedItem.Value);
        int CID = UserCommon.ToInt(this.cbbCID.SelectedItem.Value);
        int UID = UserCommon.ToInt(this.cbbUID.SelectedItem.Value);

        object[] Datas = new object[] { MLID, CID, UID };
        string Keyword = this.txtKeyword.Text.ToLower();
        DateTime DF = UserCommon.ToDate(this.datMLFromDate.RawText);
        DateTime DT = UserCommon.ToDate(this.datMLToDate.RawText);

        string[] DateF = new string[] { UserCommon.ToDateCompareSQLString(DF) };
        string[] DateT = new string[] { UserCommon.ToDateCompareSQLString(DT) };

        DataTable dt = new TimeSheetData().SearchWithDate(Datas, Keyword, DateF, DateT, OderBy);
        
        this.stTimeSheet.DataSource = dt;
        this.stTimeSheet.DataBind();
        UserCommon.SetSession(UserCommon.DataExport, dt);
    }
    [DirectMethod(Namespace = "CompanyX")]
    public void Filter()
    {
        LoadGridTimeSheetSummary();

    }

}
